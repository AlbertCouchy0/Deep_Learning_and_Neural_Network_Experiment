function p = predict(Theta1, Theta2, X)
%PREDICT Predict the label of an input given a trained neural network
% p = PREDICT(Theta1, Theta2, X) outputs the predicted label of X given the trained weights of a neural network (Theta1, Theta2)

% Useful values
m = size(X, 1);
num_labels = size(Theta2, 1);

% You need to return the following variables correctly 
p = zeros(size(X, 1), 1);
h1 = sigmoid([ones(m, 1) X] * Theta1');

n = size(h1,1);
h2 = sigmoid([ones(n,1) h1] * Theta2');

[temp, p] = max(h2, [], 2);
% ====================================
end


% 该函数的功能是利用训练好的神经网络对输入数据进行分类预测，并输出预测的类别标签。以下是函数的详细解释：
% 
% ### 输入参数：
% - **Theta1**：神经网络第一层（输入层到隐藏层）的权重参数，是一个二维数组，其维度为（隐藏层节点数 × 输入层节点数+1），其中+1是为了考虑偏置项。
% - **Theta2**：神经网络第二层（隐藏层到输出层）的权重参数，是一个二维数组，其维度为（输出层节点数 × 隐藏层节点数+1），其中+1是为了考虑偏置项。
% - **X**：输入数据，是一个二维数组，其维度为（样本数量 × 输入特征数）。
% 
% ### 输出参数：
% - **p**：预测的类别标签，是一个一维数组，其维度为（样本数量 × 1），每个元素表示对应样本的预测类别。
% 
% ### 函数实现步骤：
% 1. **初始化变量**：
%    - 获取输入数据的样本数量 `m`。
%    - 获取输出层的节点数 `num_labels`，即类别数量。
%    - 初始化预测结果数组 `p`，用于存储每个样本的预测类别。
% 
% 2. **前向传播计算隐藏层激活值**：
%    - 在输入数据 `X` 的基础上添加偏置项（全1列），形成新的输入矩阵 `[ones(m, 1) X]`。
%    - 计算隐藏层的激活值 `h1`，使用 `sigmoid` 函数对输入数据与第一层权重 `Theta1` 的乘积进行激活操作。
% 
% 3. **前向传播计算输出层激活值**：
%    - 在隐藏层激活值 `h1` 的基础上添加偏置项（全1列），形成新的矩阵 `[ones(m2, 1) h1]`，其中 `m2` 是隐藏层激活值的行数。
%    - 计算输出层的激活值 `h2`，使用 `sigmoid` 函数对隐藏层激活值与第二层权重 `Theta2` 的乘积进行激活操作。
% 
% 4. **预测类别**：
%    - 对输出层的激活值矩阵 `h2` 的每一行（对应一个样本的输出）找到最大值的索引，即为该样本的预测类别标签。
%    - 将找到的索引存储到预测结果数组 `p` 中。
% 
% ### 函数总结：
% 该函数通过神经网络的前向传播过程，将输入数据经过两层权重参数的线性组合和非线性激活，最终得到输出层的激活值。然后根据输出层激活值的最大索引确定每个样本的预测类别，从而实现分类任务。